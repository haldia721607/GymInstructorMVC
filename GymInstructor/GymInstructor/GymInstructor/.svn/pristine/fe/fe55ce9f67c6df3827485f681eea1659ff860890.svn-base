@model BOL.ShowUserDetails

@{
    /**/

    ViewBag.Title = "User Profile";
    Layout = "~/Views/Shared/_LayoutUser.cshtml";
}
<script src="~/Scripts/jquery-1.10.2.js"></script>
<script src="~/Scripts/jquery.validate.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
@using (Html.BeginForm("UpdateUserDetails", "Profile", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div id="wrapper">
        <div class="row wrapper border-bottom white-bg page-heading">
            <div class="col-lg-10">
                <h2>Profile</h2>
            </div>
            <div class="col-lg-2">
            </div>
        </div>
        <div class="wrapper wrapper-content animated fadeInRight">
            <div class="row m-b-lg m-t-lg">
                <div class="col-md-6">
                    <div class="profile-image">
                        <img id="impPrev" src="@ViewBag.ProfileImage" class="rounded-circle circle-border m-b-md" alt="profile">
                    </div>
                    <div class="profile-info">
                        <div class="">
                            <div>
                                <h2 class="no-margins">
                                    Alex Smith
                                </h2>
                                <h4>Founder of Groupeq</h4>
                                <small>
                                    There are many variations of passages of Lorem Ipsum available, but the majority
                                    have suffered alteration in some form Ipsum available.
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <div class="fileinput fileinput-new" data-provides="fileinput">
                        <span class="btn btn-default btn-file">
                            <span class="fileinput-new">Upload Profile Photo</span>
                            <span class="fileinput-exists">Change</span>
                            <input type="file" id="ImageUpload" onchange="ShowPreview(this)" accept="image/x-png,image/jpg,image/jpeg" name="postedFile">
                            @*@Html.TextBoxFor(model => model.Image, new { type = "file", id = "ImageUpload", onchange = "ShowPreview(this)", accept = "image/x-png,image/jpg,image/jpeg", name = "postedFile" })*@
                        </span>
                        <span class="fileinput-filename"></span>
                        <a href="#" class="close fileinput-exists" data-dismiss="fileinput" style="float: none">&times;</a>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    @if (TempData["Msg"] != null)
                    {
                        <div class="fileinput fileinput-new" data-provides="fileinput">
                            <p style="color:green">@TempData["Msg"].ToString()</p>
                        </div>
                    }
                    @if (TempData["Fail"] != null)
                    {
                        <div class="fileinput fileinput-new" data-provides="fileinput">
                            <p style="color:red">@TempData["Fail"].ToString()</p>
                        </div>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    @*@Html.ValidationMessageFor(model => model.Image,"", new { @class = "text-danger" })*@
                </div>
            </div>
            <div class="row">
                <div class="col-lg-12">
                    <div class="ibox ">
                        <div class="ibox-title">
                            <h5>Save User Details</h5>
                        </div>
                        <div class="ibox-content">
                            <form method="get">
                                <div class="form-group  row">
                                    @Html.LabelFor(model => model.updateUser.Name, "Name", htmlAttributes: new { @class = "col-sm-2 col-form-label" })
                                    <div class="col-sm-10">
                                        @Html.EditorFor(model => model.updateUser.Name, new { htmlAttributes = new { @class = "form-control", @id = "UserName" } })
                                        @Html.ValidationMessageFor(model => model.updateUser.Name, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="hr-line-dashed"></div>
                                <div class="form-group  row">
                                    @Html.LabelFor(model => model.updateUser.Email, "Email", htmlAttributes: new { @class = "col-sm-2 col-form-label" })
                                    <div class="col-sm-10">
                                        @Html.EditorFor(model => model.updateUser.Email, new { htmlAttributes = new { @class = "form-control", @id = "UserEmail" } })
                                        @Html.ValidationMessageFor(model => model.updateUser.Email, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="hr-line-dashed"></div>
                                <div class="form-group  row">
                                    @Html.LabelFor(model => model.updateUserDetail.Address, "Address", htmlAttributes: new { @class = "col-sm-2 col-form-label " })
                                    <div class="col-sm-10">
                                        @Html.EditorFor(model => model.updateUserDetail.Address, new { htmlAttributes = new { @class = "form-control", @rows = "5", @cols = "30" } })
                                        @Html.ValidationMessageFor(model => model.updateUserDetail.Address, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="hr-line-dashed"></div>
                                <div class="form-group  row">
                                    @Html.LabelFor(model => model.updateUserDetail.LandMark, "Land Mark", htmlAttributes: new { @class = "col-sm-2 col-form-label" })
                                    <div class="col-sm-10">
                                        @Html.EditorFor(model => model.updateUserDetail.LandMark, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.updateUserDetail.LandMark, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="hr-line-dashed"></div>
                                <div class="form-group row">
                                    @Html.LabelFor(model => model.updateUserDetail.GenderId, "Gender", htmlAttributes: new { @class = "col-sm-2 col-form-label" })
                                    <div class="col-sm-3">
                                        @Html.DropDownListFor(model => model.updateUserDetail.GenderId, ViewBag.GenderList as IEnumerable<SelectListItem>, "Select Gender", htmlAttributes: new { @class = "form-control m-b" })
                                    </div>
                                    <div class="col-sm-7">
                                        @Html.ValidationMessageFor(model => model.updateUserDetail.GenderId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="hr-line-dashed"></div>
                                <div class="form-group row">
                                    @Html.LabelFor(model => model.updateUserDetail.CountryId, "Country", htmlAttributes: new { @class = "col-sm-2 col-form-label" })
                                    <div class="col-sm-3">
                                        @Html.DropDownListFor(model => model.updateUserDetail.CountryId, ViewBag.CountryList as IEnumerable<SelectListItem>, "Select Country", htmlAttributes: new { @class = "form-control m-b", @onchange = "javascript:GetState(this.value);" })
                                    </div>
                                    <div class="col-sm-7">
                                        @Html.ValidationMessageFor(model => model.updateUserDetail.CountryId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="hr-line-dashed"></div>
                                <div class="form-group row">
                                    @Html.LabelFor(model => model.updateUserDetail.StateId, "State", htmlAttributes: new { @class = "col-sm-2 col-form-label" })
                                    <div class="col-sm-3">
                                        @Html.DropDownListFor(model => model.updateUserDetail.StateId, ViewBag.StateList as IEnumerable<SelectListItem>, "Select State", htmlAttributes: new { @class = "form-control m-b", @id = "ddlState", @onchange = "javascript:GetCity(this.value);" })
                                    </div>
                                    <div class="col-sm-7">
                                        @Html.ValidationMessageFor(model => model.updateUserDetail.StateId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="hr-line-dashed"></div>
                                <div class="form-group row">
                                    @Html.LabelFor(model => model.updateUserDetail.CityId, "City", htmlAttributes: new { @class = "col-sm-2 col-form-label" })
                                    <div class="col-sm-3">
                                        @Html.DropDownListFor(model => model.updateUserDetail.CityId, ViewBag.CityList as IEnumerable<SelectListItem>, "Select City", htmlAttributes: new { @class = "form-control m-b", @id = "ddlCity" })
                                    </div>
                                    <div class="col-sm-7">
                                        @Html.ValidationMessageFor(model => model.updateUserDetail.CityId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="hr-line-dashed"></div>
                                <div class="form-group  row">
                                    @Html.LabelFor(model => model.updateUserDetail.Phone, "Phone", htmlAttributes: new { @class = "col-sm-2 col-form-label" })
                                    <div class="col-sm-10">
                                        @Html.EditorFor(model => model.updateUserDetail.Phone, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.updateUserDetail.Phone, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="hr-line-dashed"></div>
                                <div class="form-group  row">
                                    @Html.LabelFor(model => model.updateUserDetail.PostalCode, "Postal Code", htmlAttributes: new { @class = "col-sm-2 col-form-label" })
                                    <div class="col-sm-10">
                                        @Html.EditorFor(model => model.updateUserDetail.PostalCode, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.updateUserDetail.PostalCode, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="hr-line-dashed"></div>
                                <div class="form-group  row" id="data_1">
                                    @Html.LabelFor(model => model.updateUserDetail.DOB, "Date of birth", htmlAttributes: new { @class = "col-sm-2 col-form-label" })
                                    <div class="col-sm-3 input-group date">
                                        <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                                        @Html.EditorFor(model => model.updateUserDetail.DOB, new { htmlAttributes = new { @class = "form-control", @placeholder = "Select DOB" } })
                                    </div>
                                    <div class="col-sm-7">
                                        @Html.ValidationMessageFor(model => model.updateUserDetail.DOB, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="hr-line-dashed"></div>
                                <div class="form-group row">
                                    <div class="col-sm-4 col-sm-offset-2">
                                        @*<button class="btn btn-white btn-sm" type="submit">Cancel</button>*@
                                        @*<button class="btn btn-primary btn-sm" onclick="return validateForm()" type="submit">Save changes</button>*@
                                        <button class="btn btn-primary btn-sm" value="UserProfile" type="submit">Save changes</button>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery-1.8.2.js"></script>
<script src="~/Scripts/jquery-ui.min.js"></script>
<script language="javascript" type="text/javascript">
     //To work perfect on selection change bind another drowdown without page full load and also wok on edit mode perfectly
    function GetState(countryId) {
        var procemessage = "<option value='0'> Please wait...</option>";
        $("#ddlState").html(procemessage).show();
        var url = "@System.Configuration.ConfigurationManager.AppSettings["WebRoot"]UsersSection/Profile/GetState/";
        $.ajax({
            url: url,
            data: { countryid: countryId },
            cache: false,
            type: "POST",
            success: function (data) {
                var markup = "<option value='0'>Select State</option>";
                for (var x = 0; x < data.length; x++) {
                    markup += "<option value=" + data[x].Value + ">" + data[x].Text + "</option>";
                }
                $("#ddlState").html(markup).show();
                $('#ddlCity').html('<option value="">Select City</option>');
            },
            error: function (reponse) {
                alert("error : " + reponse);
            }
        });
    }
    function GetCity(stateId) {
        var processmessage = "<option value='0'> Please wait....</option>";
        $("#ddlCity").html(processmessage).show();
        var url = "@System.Configuration.ConfigurationManager.AppSettings["WebRoot"]UsersSection/Profile/GetCity/";
        $.ajax({
            url: url,
            data: { stateId: stateId },
            cache: false,
            type: "POST",
            success: function (data) {
                var markup = "<option value='0'>Select City</option>";
                for (var i = 0; i < data.length; i++) {
                    markup += "<option value=" + data[i].Value + ">" + data[i].Text + "</option>";
                }
                $("#ddlCity").html(markup).show();
            },
            error: function (reponse) {
                alert("error : " + reponse);
            }
        })
    }
</script>
<script type="text/javascript">
    $(document).ready(function () {
        var IsEditMode =@Html.Raw(Json.Encode(Model.updateUserDetail.IsEdit));
        if (IsEditMode == true) {
            $('#UserEmail').attr("disabled", "disabled")
        }
    })
     //for use partial view to bind drop down but not work in edit mode (not bind and not selected value set problem). Only work  in insert not working ,and editing time not get selected value or not bind table set failed
    @*$(document).ready(function () {
        $("#CountryId").change(function () {
            var countryId = $(this).val();
            debugger
            if (countryId != "") {
                $.ajax({
                type: "Post",
                url: "@System.Configuration.ConfigurationManager.AppSettings["WebRoot"]UsersSection/Profile/GetState?CountryId=" + countryId,
                contentType: "html",
                success: function (response) {
                    $("#StateId").empty();
                    $("#StateId").append(response);
                    $('#CityId').html('<option value="">Select City</option>');
                },
                error: function () {
                    alert("Something went worng");
                }
            })
            } else {
                $("#StateId").empty();
                $('#StateId').html('<option value="">Select State</option>');
                $("#CityId").empty();
                $('#CityId').html('<option value="">Select City</option>');
            }

        })
        $("#StateId").change(function () {
            var stateId = $(this).val();
            if (stateId != "") {
                $.ajax({
                type: "Post",
                url: "@System.Configuration.ConfigurationManager.AppSettings["WebRoot"]UsersSection/Profile/GetCity?StateId=" + stateId,
                contentType: "html",
                success: function (response) {
                    $("#CityId").empty();
                    $("#CityId").append(response);
                },
                error: function () {
                    alert("Something went worng");
                }
            })
            } else {
                $("#CityId").empty();
                $('#CityId').html('<option value="">Select City</option>');
            }
        })
    })*@

    //Image Preiview
    function ShowPreview(input) {
        if (input.files && input.files[0]) {
            var ImageDir = new FileReader();
            ImageDir.onload = function (e) {
                $('#impPrev').attr('src', e.target.result);
            }
            ImageDir.readAsDataURL(input.files[0]);
        }
    }
    // //File upload validation
    //function validateForm() {
    //    var vidFileLength = $("#ImageUpload")[0].files.length;
    //    if (vidFileLength === 0) {
    //        alert("No image selected.");
    //        return false;
    //    }
    //}
</script>

@section Styles {
    @System.Web.Optimization.Styles.Render("~/plugins/awesomeCheckboxStyles")
    @System.Web.Optimization.Styles.Render("~/plugins/clockpickerStyles")
    @System.Web.Optimization.Styles.Render("~/plugins/dateRangeStyles")
    @System.Web.Optimization.Styles.Render("~/Content/plugins/iCheck/iCheckStyles")
    @System.Web.Optimization.Styles.Render("~/Content/plugins/chosen/chosenStyles")
    @System.Web.Optimization.Styles.Render("~/plugins/switcheryStyles")
    @System.Web.Optimization.Styles.Render("~/plugins/jasnyBootstrapStyles")
    @System.Web.Optimization.Styles.Render("~/plugins/nouiSliderStyles")
    @System.Web.Optimization.Styles.Render("~/plugins/dataPickerStyles")
    @System.Web.Optimization.Styles.Render("~/Content/plugins/ionRangeSlider/ionRangeStyles")
    @System.Web.Optimization.Styles.Render("~/plugins/imagecropperStyles")
    @System.Web.Optimization.Styles.Render("~/Content/plugins/colorpicker/colorpickerStyles")
    @System.Web.Optimization.Styles.Render("~/plugins/select2Styles")
    @System.Web.Optimization.Styles.Render("~/plugins/touchSpinStyles")
    @System.Web.Optimization.Styles.Render("~/plugins/tagInputsStyles")
    @System.Web.Optimization.Styles.Render("~/plugins/duallistStyles")
    @System.Web.Optimization.Styles.Render("~/Content/plugins/iCheck/iCheckStyles")
}
@section Scripts {
    @System.Web.Optimization.Scripts.Render("~/plugins/iCheck")
    @System.Web.Optimization.Scripts.Render("~/plugins/dataPicker")
    @System.Web.Optimization.Scripts.Render("~/plugins/ionRange")
    @System.Web.Optimization.Scripts.Render("~/plugins/nouiSlider")
    @System.Web.Optimization.Scripts.Render("~/plugins/jasnyBootstrap")
    @System.Web.Optimization.Scripts.Render("~/plugins/switchery")
    @System.Web.Optimization.Scripts.Render("~/plugins/chosen")
    @System.Web.Optimization.Scripts.Render("~/plugins/knob")
    @System.Web.Optimization.Scripts.Render("~/plugins/imagecropper")
    @System.Web.Optimization.Scripts.Render("~/plugins/colorpicker")
    @System.Web.Optimization.Scripts.Render("~/plugins/clockpicker")
    @System.Web.Optimization.Scripts.Render("~/plugins/dateRange")
    @System.Web.Optimization.Scripts.Render("~/plugins/select2")
    @System.Web.Optimization.Scripts.Render("~/plugins/touchSpin")
    @System.Web.Optimization.Scripts.Render("~/plugins/tagInputs")
    @System.Web.Optimization.Scripts.Render("~/plugins/duallist")
    @System.Web.Optimization.Scripts.Render("~/plugins/iCheck")
    <script type="text/javascript">
        $(document).ready(function () {
            var $image = $(".image-crop > img")
            $($image).cropper({
                aspectRatio: 1.618,
                preview: ".img-preview",
                done: function (data) {
                    // Output the result data for cropping image.
                }
            });

            var $inputImage = $("#inputImage");
            if (window.FileReader) {
                $inputImage.change(function () {
                    var fileReader = new FileReader(),
                        files = this.files,
                        file;

                    if (!files.length) {
                        return;
                    }

                    file = files[0];

                    if (/^image\/\w+$/.test(file.type)) {
                        fileReader.readAsDataURL(file);
                        fileReader.onload = function () {
                            $inputImage.val("");
                            $image.cropper("reset", true).cropper("replace", this.result);
                        };
                    } else {
                        showMessage("Please choose an image file.");
                    }
                });
            } else {
                $inputImage.addClass("hide");
            }

            $("#download").click(function () {
                window.open($image.cropper("getDataURL"));
            });

            $("#zoomIn").click(function () {
                $image.cropper("zoom", 0.1);
            });

            $("#zoomOut").click(function () {
                $image.cropper("zoom", -0.1);
            });

            $("#rotateLeft").click(function () {
                $image.cropper("rotate", 45);
            });

            $("#rotateRight").click(function () {
                $image.cropper("rotate", -45);
            });

            $("#setDrag").click(function () {
                $image.cropper("setDragMode", "crop");
            });

            $('#data_1 .input-group.date').datepicker({
                todayBtn: "linked",
                keyboardNavigation: false,
                forceParse: false,
                calendarWeeks: true,
                autoclose: true
            });

            $('#data_2 .input-group.date').datepicker({
                startView: 1,
                todayBtn: "linked",
                keyboardNavigation: false,
                forceParse: false,
                autoclose: true
            });

            $('#data_3 .input-group.date').datepicker({
                startView: 2,
                todayBtn: "linked",
                keyboardNavigation: false,
                forceParse: false,
                autoclose: true
            });

            $('#data_4 .input-group.date').datepicker({
                minViewMode: 1,
                keyboardNavigation: false,
                forceParse: false,
                autoclose: true,
                todayHighlight: true
            });

            $('#data_5 .input-daterange').datepicker({
                keyboardNavigation: false,
                forceParse: false,
                autoclose: true
            });

            var elem = document.querySelector('.js-switch');
            var switchery = new Switchery(elem, { color: '#1AB394' });

            var elem_2 = document.querySelector('.js-switch_2');
            var switchery_2 = new Switchery(elem_2, { color: '#ED5565' });

            var elem_3 = document.querySelector('.js-switch_3');
            var switchery_3 = new Switchery(elem_3, { color: '#1AB394' });

            var elem_4 = document.querySelector('.js-switch_4');
            var switchery_4 = new Switchery(elem_4, { color: '#f8ac59' });
            switchery_4.disable();

            $('.i-checks').iCheck({
                checkboxClass: 'icheckbox_square-green',
                radioClass: 'iradio_square-green',
            });

            $('.demo1').colorpicker();

            var divStyle = $('.back-change')[0].style;
            $('#demo_apidemo').colorpicker({
                color: divStyle.backgroundColor
            }).on('changeColor', function (ev) {
                divStyle.backgroundColor = ev.color.toHex();
            });

            $('.clockpicker').clockpicker();

            $('input[name="daterange"]').daterangepicker();

            $('#reportrange span').html(moment().subtract(29, 'days').format('MMMM D, YYYY') + ' - ' + moment().format('MMMM D, YYYY'));

            $('#reportrange').daterangepicker({
                format: 'MM/DD/YYYY',
                startDate: moment().subtract(29, 'days'),
                endDate: moment(),
                minDate: '01/01/2012',
                maxDate: '12/31/2015',
                dateLimit: { days: 60 },
                showDropdowns: true,
                showWeekNumbers: true,
                timePicker: false,
                timePickerIncrement: 1,
                timePicker12Hour: true,
                ranges: {
                    'Today': [moment(), moment()],
                    'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                    'This Month': [moment().startOf('month'), moment().endOf('month')],
                    'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                },
                opens: 'right',
                drops: 'down',
                buttonClasses: ['btn', 'btn-sm'],
                applyClass: 'btn-primary',
                cancelClass: 'btn-default',
                separator: ' to ',
                locale: {
                    applyLabel: 'Submit',
                    cancelLabel: 'Cancel',
                    fromLabel: 'From',
                    toLabel: 'To',
                    customRangeLabel: 'Custom',
                    daysOfWeek: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
                    monthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
                    firstDay: 1
                }
            }, function (start, end, label) {
                console.log(start.toISOString(), end.toISOString(), label);
                $('#reportrange span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
            });
            $(".select2_demo_1").select2();
            $(".select2_demo_2").select2();
            $(".select2_demo_3").select2({
                placeholder: "Select a state",
                allowClear: true
            });

            $(".touchspin1").TouchSpin({
                buttondown_class: 'btn btn-white',
                buttonup_class: 'btn btn-white'
            });

            $(".touchspin2").TouchSpin({
                min: 0,
                max: 100,
                step: 0.1,
                decimals: 2,
                boostat: 5,
                maxboostedstep: 10,
                postfix: '%',
                buttondown_class: 'btn btn-white',
                buttonup_class: 'btn btn-white'
            });

            $(".touchspin3").TouchSpin({
                verticalbuttons: true,
                buttondown_class: 'btn btn-white',
                buttonup_class: 'btn btn-white'
            });

            $('.tagsinput').tagsinput({
                tagClass: 'label label-primary'
            });

            $('.dual_select').bootstrapDualListbox({
                selectorMinimalHeight: 160
            });
        });
        $('.chosen-select').chosen({ width: "100%" });

        $("#ionrange_1").ionRangeSlider({
            min: 0,
            max: 5000,
            type: 'double',
            prefix: "$",
            maxPostfix: "+",
            prettify: false,
            hasGrid: true
        });

        $("#ionrange_2").ionRangeSlider({
            min: 0,
            max: 10,
            type: 'single',
            step: 0.1,
            postfix: " carats",
            prettify: false,
            hasGrid: true
        });

        $("#ionrange_3").ionRangeSlider({
            min: -50,
            max: 50,
            from: 0,
            postfix: "°",
            prettify: false,
            hasGrid: true
        });

        $("#ionrange_4").ionRangeSlider({
            values: [
                "January", "February", "March",
                "April", "May", "June",
                "July", "August", "September",
                "October", "November", "December"
            ],
            type: 'single',
            hasGrid: true
        });

        $("#ionrange_5").ionRangeSlider({
            min: 10000,
            max: 100000,
            step: 100,
            postfix: " km",
            from: 55000,
            hideMinMax: true,
            hideFromTo: false
        });

        $(".dial").knob();

        $("#basic_slider").noUiSlider({
            start: 40,
            behaviour: 'tap',
            connect: 'upper',
            range: {
                'min': 20,
                'max': 80
            }
        });

        $("#range_slider").noUiSlider({
            start: [40, 60],
            behaviour: 'drag',
            connect: true,
            range: {
                'min': 20,
                'max': 80
            }
        });

        $("#drag-fixed").noUiSlider({
            start: [40, 60],
            behaviour: 'drag-fixed',
            connect: true,
            range: {
                'min': 20,
                'max': 80
            }
        });
        $('.i-checks').iCheck({
            checkboxClass: 'icheckbox_square-green',
            radioClass: 'iradio_square-green',
        });
    </script>
}

